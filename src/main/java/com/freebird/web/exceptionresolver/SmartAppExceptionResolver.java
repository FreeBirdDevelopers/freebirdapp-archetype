package com.freebird.web.exceptionresolver;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;

/**This class is used for logging the error message. This 
 * Once the runtime exceptions are generated by service or dao layer, exception will be traversed 
 * back to controller layer. If Runtime Exceptions are not handled in controllers they are traversed
 * back to DSFJExceptionResolver. Similarly if any checked/non runtime exceptions are not handled then those exceptions are also handled in this class.
 * This class will log the exception message and pass the exception to super class .*/
public class SmartAppExceptionResolver extends SimpleMappingExceptionResolver{

	/**This method will log all Runtime Exceptions which are not handled in controller.
	 *  
	 */
    public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {
		
    	HandlerMethod handlerMethod = (HandlerMethod)handler;
		Class<?> beanType = handlerMethod.getBeanType();
		String name = beanType.getName();
	    Logger logger = LoggerFactory.getLogger(name);
        // check if logger level is set to ERROR.
        if(logger.isErrorEnabled()){
        	// log the exception message
        	logger.error("Exception while execution. Below is the stack trace " , ex  );
        }
        //pass the exception object to default exception resolver maintained by Spring
        return super.resolveException(request, response, handler, ex);
    }
    
    

}

